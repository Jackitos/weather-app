---
const {
	city,
	actualTime,
	weather,
	temperature,
	maxTemperature,
	minTemperature,
} = Astro.props;
---

<a href={`/${city}`} class="block">
	<div
		class="bg-white/20 text-white p-4 rounded flex justify-between h-full hover:shadow-lg hover:bg-white/30"
	>
		<div class="mb-4 flex flex-col justify-between h-full">
			<h2 class="text-xl font-bold">
				{city}
			</h2>
			<i id="icon-fav" data-city={city} class="fa-solid fa-star text-[#FFD43B]"
			></i>
			<p class="text-sm">{actualTime}</p>
			<p class="text-sm">{weather}</p>
		</div>

		<div class="flex flex-col justify-between gap-2">
			<p class="text-4xl font-semibold">{temperature}</p>
			<p class="text-sm">H: {maxTemperature}</p>
			<p class="text-sm">L: {minTemperature}</p>
		</div>
	</div>
</a>

<script>
	const btnFavIcon = document.getElementById("icon-fav");
	const handleDelete = async (e: Event) => {
		e.preventDefault();
		e.stopPropagation();
		const city = btnFavIcon?.dataset.city;
		try {
			const confirmDelete = prompt(
				`¿Estás seguro de eliminar ${city} de tus favoritos? (y/n)`,
			);

			if (confirmDelete?.toLocaleLowerCase() == "y") {
				const response = await fetch(`http://localhost:3000/${city}`, {
					method: "DELETE",
				});
				if (response.ok) {
					alert("Ciudad eliminada correctamente");
					console.log("Ciudad eliminada correctamente");
				} else {
					console.error("Error al eliminar la ciudad");
				}
			} else {
				alert("Operación cancelada");
			}
		} catch (error) {
			console.error("Error en la solicitud de eliminación:", error);
		}
	};

	btnFavIcon?.addEventListener("click", (e) => handleDelete(e));
</script>
